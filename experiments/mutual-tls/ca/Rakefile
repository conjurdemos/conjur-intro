require 'conjur/api'
require './lib/signer'


namespace :syncer do
  def api
    # OpenSSL::SSL::SSLContext::DEFAULT_CERT_STORE.add_file("/opt/#{name.split('-').last}/conjur/etc/ssl/#{name}.pem")
    OpenSSL::SSL::SSLContext::DEFAULT_CERT_STORE.add_file('/dap-certs/dap-master.pem')
    Conjur.configuration.account = 'demo'
    Conjur.configuration.appliance_url = "https://dap-master/api"
    api_key = Conjur::API.login('admin', 'MySecretP@ss1')
    Conjur::API.new_from_key('admin', api_key)
  end

  task :test do
    logger = Logger.new(STDOUT)

    role = api.role('demo:host:staging/applications/application-1/instance-1')
    puts role
    puts role.owner

    role = api.role('demo:webservice:staging/applications/application-1/certificate-authentication')
    puts role
    puts role.owner.owner

    # role = api.role('demo:host:staging/applications/application-1/instance-1')
    # # role = api.role('demo:webservice:staging/databases/database-1/certificate-authentication')
    # # puts role.permitted_roles('x509-signing').inspect
    # puts role.memberships.inspect
    # # puts api.attributes.inspect
    # # exit
    # Signer.new(
    #   api: api,
    #   logger: logger,
    #   account: Conjur.configuration.account
    # ).sign(
    #   resource: 'staging/databases/database-1',
    #   client_name: 'staging/applications/application-1/instance-1',
    #   csr: IO.read('/certs/application-1/application-1.csr')
    # )
  end

  task :load_data do
    # api.load_policy('root', File.read('policy/root.yml'))
    # api.load_policy('staging', File.read('policy/services.yml'))
    # api.load_policy('staging/databases/database-1', File.read('policy/templates/certificate-authentication.yml'))
    # api.load_policy('staging/applications/application-1', File.read('policy/templates/application.yml'))
    # api.load_policy('staging', File.read('policy/grants.yml'))

    # api.load_policy('staging/applications/application-1', File.read('policy/hosts.yml'))

    # api.resource('demo:variable:staging/databases/database-1/certificate-authentication/certificate').add_value SecureRandom.hex(12)
    # role = api.role('demo:host:staging/applications/application-1/instance-1')
    # role = api.role('demo:webservice:staging/databases/database-1/certificate-authentication')
    # role = api.role('demo:host:staging/applications/application-1/instance-1')
    # puts role.permitted?('x509-signing', role: 'demo:webservice:staging/databases/database-1/certificate-authentication')
    # puts role.methods.inspect
    # puts role.permitted_roles('x509-signing').inspect
    # puts role.inspect
    # puts role.memberships.inspect

    # puts api.load_policy('root', File.read('policy/v2/policy.yml'), method: :put)
    puts api.load_policy('root', File.read('policy/v2/policy.yml'))

    # api.resource(
    #   'demo:variable:staging/databases/database-1/certificate-authentication/certificate'
    # ).add_value File.read('/certs/cas/database-1/database-1.pem')
    # api.resource(
    #   'demo:variable:staging/databases/database-1/certificate-authentication/private-key'
    # ).add_value File.read('/certs/cas/database-1/database-1-key.pem')
    # api.resource(
    #   'demo:variable:staging/databases/database-1/certificate-authentication/certificate-chain'
    # ).add_value File.read('/certs/cas/database-1/chain.pem')

    api.resource(
      'demo:variable:staging/applications/application-1/certificate-authentication/certificate'
    ).add_value File.read('/certs/cas/application-1/application-1.pem')
    api.resource(
      'demo:variable:staging/applications/application-1/certificate-authentication/private-key'
    ).add_value File.read('/certs/cas/application-1/application-1-key.pem')
    api.resource(
      'demo:variable:staging/applications/application-1/certificate-authentication/certificate-chain'
    ).add_value File.read('/certs/cas/application-1/chain.pem')


    # puts api.role(
    #   'demo:webservice:test/certificate-authentication'
    # ).permitted?(
    #   'x509-signing',
    #   role: 'demo:host:test/instance-1'
    # )
  end
end
