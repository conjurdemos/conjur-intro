#!/bin/ash -e

function _print_help() {
  cat << EOF

A tool which uses the DAP API to perform various tasks.

Usage: bin/api [options]

    --authenticate-user         Login using the default username (admin) and password (MySecretP@ss1)
    -h, --help                  Shows this help message
    -p, --password <password>   Sets the password (default is 'MySecretP@ss1')
    -u, --user <conjur-user>    Sets the username (default is 'admin')

EOF
  exit
}

function _retrieve_authentication_token {
  local user="$1"
  local api_key="$2"
  local url="${3:-$follower_url}"
  raw_token="$(curl -s -k -X POST -d $api_key "$url/authn/demo/$user/authenticate")"
  token=$(echo -n $raw_token | base64 | tr -d '\r\n')
  echo "$token"
}

function _authenticate_user {
  local user="$1"
  local password="$2"
  local url="${3:-$follower_url}"
  api_key="$(curl -s -k --user $user:$password "$url/authn/demo/login")"
  token=$(_retrieve_authentication_token $user $api_key)
  echo "$token"
}

follower_url='http://conjur-follower.mycompany.local'
USER='admin'
PASSWORD='MySecretP@ss1'
cmd=''

while true ; do
  case "$1" in
    -u | --user ) shift ; USER=$1 ; shift ;;
    -p | --password ) shift ; PASSWORD=$1 ; shift ;;
    --authenticate-user ) shift ; cmd="_authenticate_user $USER $PASSWORD" ;;
    -h | --help ) _print_help ; shift ;;
     * ) if [ -z "$1" ]; then break; else echo "$1 is not a valid option"; exit 1; fi;;
  esac
done

eval $cmd



# Authenticate with a user
# auth_token=$(user_authentication_token 'admin' $_admin_password)
# curl -k -X POST -d $api_key "http://conjur-follower.mycompany.local/authn/default/$user/authenticate

# echo "auth token: $auth_token"
# secret="production/myapp/database/username"
# encoded_secret="production%2Fmyapp%2Fdatabase%2Fusername"
#
# # Set a variable
# resp=$(curl -k \
#       -X POST \
#       -H "Authorization: Token token=\"$auth_token\"" \
#       --data "foo-bar" \
#       "https://localhost/secrets/test/variable/$encoded_secret")
#
# # Retrieve variable value
# resp=$(curl -k \
#       -H "Authorization: Token token=\"$auth_token\"" \
#       "https://localhost/secrets/test/variable/$encoded_secret")
#
# echo "$resp"
#
#
# # Authenticate with a host
# host="host%2Ftest-host-1"
# api_key=""
# auth_token=$(authentication_token $host $api_key)
# echo "$auth_token"
