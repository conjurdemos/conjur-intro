#!/bin/ash -e

function _print_help() {
  cat << EOF

A tool which uses the DAP API to perform various tasks.

Usage: bin/api [options]

    --authenticate-user         Login using the default username (admin) and password (MySecretP@ss1)
    -h, --help                  Shows this help message
    -p, --password <password>   Sets the password (default is 'MySecretP@ss1')
    -u, --user <conjur-user>    Sets the username (default is 'admin')
    --run-against-master        Runs command against the master (only relevant if command is an authenticate/read action)
    --load-policy-and-values    Loads a default set of policies to mimic a customer experience

EOF
  exit
}

function retrieve_authentication_token() {
  local user="$1"
  local api_key="$2"
  local url="${3:-$URL}"
  raw_token=$(curl \
              --silent \
              --show-error \
              --fail \
              --insecure \
              --request POST \
              --data "$api_key" \
              "$url/authn/demo/$user/authenticate")
  token=$(echo -n $raw_token | base64 | tr -d '\r\n')
  echo "$token"
}

function authenticate_user() {
  local user="${1:-$USER}"
  local password="${2:-$PASSWORD}"
  local url="${3:-$URL}"
  api_key=$(curl --silent --show-error --fail --insecure --user $user:$password "$url/authn/demo/login")
  token=$(retrieve_authentication_token $user $api_key $url)
  echo "$token"
}

function load_policy() {
  local namespace="$1"
  local policy="$2"
  local action="POST"
  local replace="${3:-$action}"
  local token=$(authenticate_user $USER $PASSWORD $master_url)
  local response=$(curl \
      --header "Authorization: Token token=\"$token\"" \
      --silent \
      --show-error \
      --fail \
      --insecure \
      --request $action \
      --data "$(cat $policy)" \
     "$master_url/policies/demo/policy/$namespace")
  echo $response
}

function set_variable {
  local variable="$1"
  local value="$2"
  local token=$(authenticate_user $USER $PASSWORD $master_url)

  curl --header "Authorization: Token token=\"$token\"" \
        --insecure \
        --data "$value" \
        "$master_url/secrets/demo/variable/$variable"
  echo "'$variable' set to '$value'"
}

function load_default_policy {
  load_policy 'root' 'policy/default.yml'
  load_policy 'root' 'policy/modular/root.yml'
  load_policy 'staging' 'policy/modular/apps/applications.yml'
  load_policy 'staging/my-app-1' 'policy/modular/apps/generic-application.yml'
  load_policy 'staging/my-app-1' 'policy/modular/services/pg-database.yml'
  load_policy 'staging/my-app-1' 'policy/modular/pg-entitlement.yml'
}

function load_default_values {
  set_variable 'staging/my-app-1/postgres-database/url' 'staging.mycompany-postgres.com/my-app'
  set_variable 'staging/my-app-1/postgres-database/port' '5432'
  set_variable 'staging/my-app-1/postgres-database/username' 'my-app'
  set_variable 'staging/my-app-1/postgres-database/password' 'secret-p@ssword'
}

function load_policy_and_set_variables {
  load_default_policy
  load_default_values
}

function load_puppet_testing_data {
  load_policy 'root' 'policy/puppet/puppet-servers.yml'
  load_policy 'root' 'policy/puppet/credentials.yml'
  load_policy 'root' 'policy/puppet/role-credential-mapping.yml'

  set_variable 'credentials/api-key' 'secret-api-key'
  set_variable 'credentials/authorization-token' 'secret-auth-token'
  set_variable 'credentials/public certificate' 'super secret public certificate'
}

follower_url='http://conjur-follower.mycompany.local'
master_url='https://conjur-master.mycompany.local'
URL=$follower_url
USER='admin'
PASSWORD='MySecretP@ss1'
cmd=''

while true ; do
  case "$1" in
    -u | --user ) shift ; USER=$1 ; shift ;;
    -p | --password ) shift ; PASSWORD=$1 ; shift ;;
    --authenticate-user ) shift ; cmd="authenticate_user" ;;
    -h | --help ) _print_help ; shift ;;
    --load-policy-and-values ) shift ; cmd="load_policy_and_set_variables" ;;
    --run-against-master ) shift ; URL=$master_url ;;
    --load-puppet-data ) shift ; cmd="load_puppet_testing_data" ;;
    # --configure-seed-service ) shift ; cmd="configure_cluster_seed_service" ;;
     * ) if [ -z "$1" ]; then break; else echo "$1 is not a valid option"; exit 1; fi;;
  esac
done

eval $cmd



# Authenticate with a user
# auth_token=$(user_authentication_token 'admin' $_admin_password)
# curl -k -X POST -d $api_key "http://conjur-follower.mycompany.local/authn/default/$user/authenticate

# echo "auth token: $auth_token"
# secret="production/myapp/database/username"
# encoded_secret="production%2Fmyapp%2Fdatabase%2Fusername"
#
# # Set a variable
# resp=$(curl -k \
#       -X POST \
#       -H "Authorization: Token token=\"$auth_token\"" \
#       --data "foo-bar" \
#       "https://localhost/secrets/test/variable/$encoded_secret")
#
# # Retrieve variable value
# resp=$(curl -k \
#       -H "Authorization: Token token=\"$auth_token\"" \
#       "https://localhost/secrets/test/variable/$encoded_secret")
#
# echo "$resp"
#
#
# # Authenticate with a host
# host="host%2Ftest-host-1"
# api_key=""
# auth_token=$(authentication_token $host $api_key)
# echo "$auth_token"
