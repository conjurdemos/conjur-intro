#!/bin/bash

repo_root() {
  git rev-parse --show-toplevel
}

# A date timestamp separated by underscores, ideal for file names.
timestamp() {
  date +"%Y_%m_%d_%I_%M_%s"
}

log_dir() {
  echo "$(repo_root)/tmp"
}

check_env() {
  # evaluate given variable name to get its value
  eval temp_var="\$$1"

  # verify it has a non-empty value
  if [ -z "${temp_var}" ]; then
    echo "ENV VAR \"$1\" must be set. Try using summon and running this command again."
    exit 1
  fi
}

announce() {
  echo "------------------------------------"
  echo "$1"
  echo "------------------------------------"
}

is_gnu_date() {
  date --version >/dev/null 2>&1
}

# Outputs time in UTC, including the timezone offset
date_timestamp() {
  if is_gnu_date; then
    echo "$(date '+%Y-%m-%d %T')+00:00"
  else
    echo "$(date -u "+%Y-%m-%d %T")+00:00"
  fi
}

retrieve_authentication_token() {
  local account="$1"
  local user="$2"
  # Allow hosts to be used instead of just users
  user=$(echo "$user" | sed -e "s/\//%2F/g")
  local api_key="$3"
  local url="${4:-$URL}"
  token="$(curl \
      --silent \
      --insecure \
      --header "Accept-Encoding: base64" \
      --request POST \
      --data "$api_key" \
      "$url/authn/$account/$user/authenticate")"
  echo "$token"
}

authenticate_user() {
  local account="$1"
  local user="$2"
  local password="$3"
  local url="${4:-$URL}"
  api_key="$(curl \
      --silent \
      --insecure \
      --user "$user:$password" \
      "$url/authn/$account/login")"
  token=$(retrieve_authentication_token "$account" "$user" "$api_key" "$url")
  echo "$token"
}
