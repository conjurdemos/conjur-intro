#!/bin/bash -e

# shellcheck disable=SC1090,SC1091
source "$(git rev-parse --show-toplevel)/tools/performance-tests/k6/bin/functions"

ENABLE_STATSD=${ENABLE_STATSD:-"false"}
# Default for statsd
export K6_STATSD_PORT=${K6_STATSD_PORT:-"8125"}
export K6_STATSD_ADDR=${K6_STATSD_ADDR:-"graphite-statsd:$K6_STATSD_PORT"}

export CONJUR_ADMIN_API_KEY=$(./bin/cli conjur user rotate-api-key | tail -n 1 | tr -d '[:space:]')
export APPLIANCE_MASTER_URL=${APPLIANCE_MASTER_URL:-"https://conjur-master.mycompany.local:443"}
export APPLIANCE_READ_URL=${APPLIANCE_READ_URL:-"https://conjur-follower.mycompany.local:443"}
export CONJUR_ACCOUNT="demo"
export CONJUR_IDENTITY="admin"
export K6_FLAGS="--insecure-skip-tls-verify"

POLICY_SET="secrets"
CSV_FILE="unpopulated-secrets.csv"
OUTPUT_FILE="$(repo_root)/tools/performance-tests/k6/data/$CSV_FILE"
POPULATE_SECRETS_TEST_FILE="/tools/performance-tests/k6/load-unpopulated-secrets.js"

# Default script arguments values
LOB_COUNT=10
ACCOUNTS_PER_SAFE_COUNT=10
SAFES_COUNT=50
HOSTS_COUNT=100
USERS_COUNT=200
ALL_PROPERTIES_SYNCHRONIZED="false"

print_help() {
    cat << EOF
load-benchmark-data(1)

NAME
load-benchmark-data

SYNOPSIS
load-benchmark-data [--accounts_per_safe] [--safes] [--hosts] [--users] [--all-properties-synchronized]

DESCRIPTION

This script is designed to create Conjur data similar to what Synchronizer would
create.

This script will do all of these steps in a sequential order: create temp files
to store defined policies, push all of those policies to Conjur all at once,
create a temp file with all of the secrets to be populated with data and lastly
fill those secrets with data.

The following options are available:

  --accounts_per_safe             Defaults to 10. This value corresponds
                                  to the number of accounts whose data is in a
                                  single safe.

  --safes                         Defaults to 50. This value corresponds to the
                                  number of safes assigned to a single LOB. By
                                  default there are 10 LOBs.

  --hosts                         Defaults to 100.

  --users                         Defaults to 200.

  --all-properties-synchronized   If this flag is specified, this will create data
                                  equivalent to what Synchronizer would push to
                                  Conjur when synchronizing an account with
                                  five properties. This will result in 25000 secrets
                                  being pushed to Conjur if using default accounts
                                  and safes values.

EOF
}

#
# This function will perform the following actions:
#
# - [x] Load LOB policy
# - [x] Load Host policy
# - [x] Load User policy
#
# The contents of each policy load will be logged and parsed into a json file
# under the local tmp/ directory.
#
load_policy_set() {
  check_env "APPLIANCE_MASTER_URL"
  check_env "APPLIANCE_READ_URL"
  check_env "CONJUR_ADMIN_API_KEY"
  check_env "POLICY_SET"

  LOG_DIR="$(repo_root)/tools/performance-tests/k6/tmp/$(timestamp)-load-policy-set-$POLICY_SET"
  policy_set_dir="/tools/performance-tests/k6/data/policy"
  test_plan_file="/tools/performance-tests/k6/load-policy.js"
  policy_lobs_log_file="$LOG_DIR/policy-lob"
  policy_hosts_log_file="$LOG_DIR/policy-hosts"
  policy_users_log_file="$LOG_DIR/policy-users"

  mkdir -p "$LOG_DIR"

  # Load LOBs, Safes, and Variables
  "$(repo_root)/tools/performance-tests/k6/bin/k6" run \
    -e POLICY_DIRECTORY="$policy_set_dir/$POLICY_SET" \
    -e SAFE_COUNT=$SAFES_COUNT \
    -e LOB_COUNT=$LOB_COUNT \
    "/tools/performance-tests/k6/load-synchronizer-policies.js" \
      "$K6_FLAGS" 2>&1 | tee -a "${policy_lobs_log_file}.log"

  # Load Hosts
  POLICY_FILE="$policy_set_dir/$POLICY_SET/hosts.yml" \
    "$(repo_root)/tools/performance-tests/k6/bin/k6" run "$test_plan_file" \
      "$K6_FLAGS" 2>&1 | tee -a "${policy_hosts_log_file}.log"

  # Load Users
  POLICY_FILE="$policy_set_dir/$POLICY_SET/users.yml" \
    "$(repo_root)/tools/performance-tests/k6/bin/k6" run "$test_plan_file" \
      "$K6_FLAGS" 2>&1 | tee -a "${policy_users_log_file}.log"
}

get_unpopulated_secrets() {
  local container_name=$1
  local csv_path_in_container="/opt/conjur/$CSV_FILE"
  query="\copy (select r.resource_id from resources AS r
            LEFT JOIN secrets s ON s.resource_id = r.resource_id
            WHERE s.resource_id IS NULL AND r.resource_id LIKE '%variable%')
          TO '$csv_path_in_container'
          WITH DELIMITER ',' CSV HEADER;"

  docker exec "$container_name" bash -c $"
    chpst -u conjur psql -c \"$query\"
  "

  # Create data directory if it doesn't exist
  mkdir -p "$(repo_root)/tools/performance-tests/k6/data"

  docker cp "$container_name:$csv_path_in_container" "$OUTPUT_FILE"
}

main() {
  while test $# -gt 0; do
  case "$1" in
    -h | --help)
      print_help
      exit 0
      ;;
    --accounts_per_safe)
      ACCOUNTS_PER_SAFE_COUNT="$2"
      shift 2
      ;;
    --safes)
      SAFES_COUNT="$2"
      shift 2
      ;;
    --all-properties-synchronized)
      ALL_PROPERTIES_SYNCHRONIZED="true"
      shift 1
      ;;
    --hosts)
      HOSTS_COUNT="$2"
      shift 2
      ;;
    --users)
      USERS_COUNT="$2"
      shift 2
      ;;
    --) shift;
      break
      ;;
    -?*)
      printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
      ;;
    *)  # Default case: No more options, so break out of the loop.
      break
      ;;
  esac
  done

  if [ "$ALL_PROPERTIES_SYNCHRONIZED" = "false" ]; then
    SECRETS_PER_ACCOUNT=2
  else
    SECRETS_PER_ACCOUNT=5
  fi

  if [ "$ENABLE_STATSD" = "true" ]; then
    echo "Configuring k6 to report load testing data points to StatsD"
    K6_FLAGS+=" -o output-statsd"
  fi

  # Generate policy files
  docker compose run --build --rm policy-generator python3 policy-generator.py \
    --account_count "$ACCOUNTS_PER_SAFE_COUNT" \
    --secrets_per_account "$SECRETS_PER_ACCOUNT" \
    --lob_count "$LOB_COUNT" \
    --safe_count "$SAFES_COUNT" \
    --host_count "$HOSTS_COUNT" \
    --user_count "$USERS_COUNT"

  # Load policies into Conjur using previously made files
  load_policy_set

  # Get unpopulated secrets using data from the provided container
  get_unpopulated_secrets "conjur-intro-conjur-master-1.mycompany.local-1"

  # Populate secrets using a k6 test file
  "$(repo_root)/tools/performance-tests/k6/bin/k6" run "$POPULATE_SECRETS_TEST_FILE" "$K6_FLAGS"

  echo "--FINISHED LOADING BENCHMARK DATA INTO CONJUR--."
}

main "$@"
