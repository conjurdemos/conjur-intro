#!/usr/bin/env bash

# DESCRIPTION
#
# Given the id of a secret, a value to update it to, and a conjur access token,
# will use the Conjur API to update the secret. While tokens issued by one
# Conjur node will work on another, this is injectable to allow for the caller
# to determine the source of the token.
#
# This is faster than using the cli.
#
# USAGE
# ./bin/load-dynamic-policy-secret --id replication-test/policy-1/secret-1 --value 1234567 --token "$TOKEN"
#

# Always work from repo root directory
cd "$(dirname ${0})/..";

source ./bin/functions
source ./bin/utils.sh

CONJUR_ACCOUNT="demo"

# Use this to hide WARN from docker compose...
# WARN[0000] The "VERSION" variable is not set. Defaulting to a blank string. 
export VERSION=

CONJUR_ACCESS_TOKEN=
SECRET_IDENTIFIER=
SECRET_VALUE=

main() {
  echo "Beginning script: $0"
  DOCKER_LEADER_CONTAINER=$(discover_leader_container)
  echo "Active Leader container is: $DOCKER_LEADER_CONTAINER"

  if [[ -z "$CONJUR_ACCESS_TOKEN" ]]; then
    echo "FATAL: CONJUR_ACCESS_TOKEN must be specified as --token"
    exit 1
  fi

  if [[ -z "$SECRET_IDENTIFIER" ]]; then
    echo "FATAL: SECRET_IDENTIFIER must be specified as --id"
    exit 1
  fi

  if [[ -z "$SECRET_VALUE" ]]; then
    echo "FATAL: SECRET_VALUE must be specified as --value"
    exit 1
  fi

  echo "Setting secret '$SECRET_IDENTIFIER' to '$SECRET_VALUE'..."
  set_secret "$CONJUR_ACCESS_TOKEN" "$(urlencode_forward_slashes_only "$SECRET_IDENTIFIER")" "$SECRET_VALUE"

  echo "DONE."
}

set_secret() {
  local token="$1"
  local id="$2"
  local value="$3"

  docker compose exec "$DOCKER_LEADER_CONTAINER" sh -c "
    curl \
      --max-time 3 \
      --silent \
      --insecure \
      --request POST \
      --header 'Authorization: Token token=\"$token\"' \
      --data '$value' \
      https://localhost/secrets/$CONJUR_ACCOUNT/variable/$id
  "
}

while true ; do
  case "$1" in
    --id ) shift; SECRET_IDENTIFIER="$1" ; shift ;;
    --token ) shift; CONJUR_ACCESS_TOKEN="$1" ; shift ;;
    --value ) shift; SECRET_VALUE="$1" ; shift ;;
     * ) if [ -z "$1" ]; then break; else echo "$1 is not a valid option"; exit 1; fi;;
  esac
done

main

