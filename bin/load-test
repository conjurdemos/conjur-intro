#!/bin/bash
set -e

source "$(git rev-parse --show-toplevel)/bin/functions"

# Debug mode skips test runs (displays script output, incl. phase info)
# DEBUG_MODE interferes with underlying system dependencies, so do not use.
DEBUG_LEVEL="false"
ENABLE_STATSD=${ENABLE_STATSD:-"true"}
# Default for statsd
export K6_STATSD_PORT=${K6_STATSD_PORT:-"8125"}
export K6_STATSD_ADDR=${K6_STATSD_ADDR:-"12.16.23.22:$K6_STATSD_PORT"}
# The number of times to run a test.
NUM_PHASES=1

# The Conjur Account.
ORGANIZATION=${ORGANIZATION:-"cyberark"}

function print_help() {
  cat << EOF
NAME
    Runs a load test against the configured Conjur Enterprise deployment.

SYNOPSIS
    load [global options]

GLOBAL OPTIONS
    -h, --help                - Show this message.
    --name <folder-name>      - Target folder to export the report to. If the folder exists
                                the contents will be over-written.
    --with-follower           - Runs the variable request portion of the test against the
                                Follower.

EOF
exit
}

print_settings() {
    announce "Load Test - Script Settings and Enviroment Variables"
    echo "DEBUG LEVEL                 : $DEBUG_LEVEL"
    echo "NUM_PHASES                  : $NUM_PHASES"
    echo "MULTIPLY_CONNECTIONS / PHASE: $MULTIPLY_CONNECTIONS"
    echo "TEST_NAME                   : $TEST_NAME"
    announce "K6 Settings"
    echo "APPLIANCE_URL               : $APPLIANCE_URL"
    echo "CONJUR_ADMIN_API_KEY:       : redacted"
    echo ""
    echo "Load test and system metrics reports can be found at: $LOG_ROOT/*"
}

test_k6() {
  # Set CONJUR_ADMIN_API_KEY
  export CONJUR_ADMIN_API_KEY=$(./bin/cli conjur user rotate-api-key | tail -n 1 | tr -d '[:space:]')

  check_env "APPLIANCE_URL"
  check_env "CONJUR_ADMIN_API_KEY"

  # The name of the test plan file (no extension)
  TEST_PLAN=$(basename -s .js "$TEST_FILE")
  # The name of this test (for logging purposes)
  TEST_NAME="k6-$(basename "$TEST_PLAN")"
  # The current timestamp
  SCRIPT_RUN_TIMESTAMP=$(timestamp)
  # Using the above forms the log directory for this test run
  LOG_ROOT="$(log_dir)/$SCRIPT_RUN_TIMESTAMP-$TEST_NAME"
  # Log for the script settings
  LOG_FILE_INFO="$LOG_ROOT/$TEST_NAME.log"

  # Ensure log output dir exists
  mkdir -p "$LOG_ROOT"

  # Display debug information
  print_settings | tee "$LOG_FILE_INFO"

  # Run K6 test in phases
  run_k6_test_phases
}

run_k6_test_phases() {
    check_env "APPLIANCE_URL"
    check_env "LOG_ROOT"
    check_env "TEST_PLAN"
    check_env "TEST_NAME"
    check_env "SLEEP_DURATION"

    announce "Begin the load test..."
    echo "Testing will proceed in [$NUM_PHASES] phase(s)..."

    for (( i=0; i<NUM_PHASES; i++ ))
    do
        local phase=$((i+1))
        local test_start
        local test_end
        local log_dir="$LOG_ROOT/p$phase"

        # Maintain a unique log per phase
        mkdir -p "$log_dir"

        # Clone the test plan that was used
        cp "$TEST_FILE" "$LOG_ROOT/p$phase/$TEST_PLAN.js"

        announce "Begin phase $phase / $NUM_PHASES"

        # Start the clock
        test_start=$(date_timestamp | sed 's/ /T/g')
        echo "Starting test at: $test_start"

        # Run K6 test
        cmd run_k6_test

        echo "The test has completed!"

        # Stop the clock
        test_end=$(date_timestamp | sed 's/ /T/g')
        echo "Phase $phase / $NUM_PHASES completed at: $test_end"
    done
}

run_k6_test() {
  local log_file="$log_dir/k6.log"

  echo "Starting k6 test in quiet mode, summary will be printed when completed..."
  echo "See log file at: $log_file"

  if [ "$ENABLE_STATSD" = "true" ]; then
    echo "Configuring k6 to report load testing data points to StatsD"

    echo $K6_STATSD_ADDR
    "$(repo_root)/bin/k6" run "$TEST_FILE" \
      -o output-statsd \
      --insecure-skip-tls-verify \
      --quiet 2>&1 | tee "$log_file"
  else
    "$(repo_root)/bin/k6" run "$TEST_FILE" \
      --insecure-skip-tls-verify \
      --quiet 2>&1 | tee "$log_file"
  fi
}

REPORT_FOLDER='default'
USE_FOLLOWER='false'
SLEEP_DURATION=1

main() {
  while true ; do
    case "$1" in
      --name ) shift ; REPORT_FOLDER=$1 ; shift ;;
      --sleep) SLEEP_DURATION="$2" shift 2 ;;
      --with-follower ) shift ; USE_FOLLOWER="true" ;;
      -h | --help ) print_help ;;
       * ) if [ -z "$1" ]; then break; else echo "$1 is not a valid option"; exit 1; fi;;
    esac
  done

  eval "test_k6"
}

main "$@"