#!/bin/bash -e
_admin_password="MySecretP@ss1"

function _print_help() {
  cat << EOF

A tool that provides a variety of DAP lifecycle workflows.

Synopsis: bin/dap <command> [command options]

Global Options:

    --h, --help                 Shows this help message
    --stop                      Stops all containers and cleans up cached files

Commands: bin/dap <command>


    cluster                     Setup and workflows for a DAP cluster
    single                      Setup and workflows for a single DAP instance

EOF
  exit
}

function _print_cluster_help() {
  cat << EOF

Provisions a DAP cluster locally using Docker, and run through some common workflows.

Usage: bin/dap cluster [options]

    --create-backup             Generates a backup of the Master. The backup can be found in the system/backup folder
    --dry-run                   Displays the commands that will be run, without actually running them
    --enable-auto-failover      Enrolls nodes into and auto-failover cluster
    -h, --help                  Shows this help message
    --promote-standby           Stops the Master and promotes the first Standby as the new Master
    --stop                      Stops all containers and cleans up cached files
    -t, --tag <appliance-tag>   Starts a cluster with a particular appliance (defaults to 5.0-stable)

EOF
  exit
}

function _print_single_help() {
  cat << EOF

Provisions a single DAP instance locally using Docker.

Usage: bin/dap single [options]

    --create-backup             Generates a backup of the Master. The backup can be found in the system/backup folder
    --dry-run                   Displays the commands that will be run, without actually running them
    --with-follower             Starts a DAP follower with a Layer 7 load balance
    -h, --help                  Shows this help message
    --stop                      Stops all containers and cleans up cached files
    -t, --tag <appliance-tag>   Starts a cluster with a particular appliance (defaults to 5.0-stable)

EOF
  exit
}

function _set_master_multi_node_proxy_config() {
  cp files/haproxy/master/multi-node/haproxy.cfg files/haproxy/master/haproxy.cfg
}

function _set_master_single_node_proxy_config() {
  cp files/haproxy/master/single/haproxy.cfg files/haproxy/master/haproxy.cfg
}

function _run() {
  local _all_args=("$@")
  local _node_name=$1
  local _args=("${_all_args[@]:1}")

  echo "Running Command (on $_node_name): '$_args'"

  if [[ $DRY_RUN = false ]]; then
    docker-compose exec $_node_name bash -c "
      $_args
    "
  fi
}

function _start_cluster() {
  if [[ $DRY_RUN = false ]]; then
    _set_master_multi_node_proxy_config
    docker-compose up -d --no-deps conjur-master.mycompany.local \
                                    conjur-master-1.mycompany.local \
                                    conjur-master-2.mycompany.local \
                                    conjur-master-3.mycompany.local \
                                    conjur-follower-1.mycompany.local
  fi
}

function _start_master() {
  if [[ $DRY_RUN = false ]]; then
    _set_master_single_node_proxy_config
    docker-compose up -d --no-deps conjur-master.mycompany.local \
                                    conjur-master-1.mycompany.local
  fi
}

function _start_l7_load_balancer() {
  if [[ $DRY_RUN = false ]]; then
    docker-compose up -d --no-deps conjur-follower.mycompany.local
  fi
}

function _start_master_and_follower() {
  if [[ $DRY_RUN = false ]]; then
    _set_master_single_node_proxy_config
    docker-compose up -d --no-deps conjur-master.mycompany.local \
                                    conjur-master-1.mycompany.local \
                                    conjur-follower-1.mycompany.local
  fi
}

function _configure_master() {
  _cmd="evoke configure master"
  _cmd="$_cmd --accept-eula"
  _cmd="$_cmd --hostname conjur-master.mycompany.local"
  _cmd="$_cmd --master-altnames conjur-master-1.mycompany.local,conjur-master-2.mycompany.local,conjur-master-3.mycompany.local"
  _cmd="$_cmd --admin-password $_admin_password"
  _cmd="$_cmd demo"

  _run conjur-master-1.mycompany.local \
    "$_cmd"
}

function _setup_standby() {
  local _standby_number=$1

  # Generate a Seed File
  _run conjur-master-1.mycompany.local \
    "evoke seed standby conjur-master-$_standby_number.mycompany.local conjur-master-1.mycompany.local > /opt/cyberark/dap/seeds/standby-seed-$_standby_number.tar"

  # Unpack and Configure
  _run conjur-master-$_standby_number.mycompany.local \
    "evoke unpack seed /opt/cyberark/dap/seeds/standby-seed-$_standby_number.tar && evoke configure standby"
}

function _start_standby_synchronization() {
  _run conjur-master-1.mycompany.local \
    "evoke replication sync start"
}

function _setup_follower() {
  # Generate Seed file
  _run conjur-master-1.mycompany.local \
    "evoke seed follower conjur-follower.mycompany.local > /opt/cyberark/dap/seeds/follower-seed.tar"

  # Unpack and Configure
  _run conjur-follower-1.mycompany.local \
    "evoke unpack seed /opt/cyberark/dap/seeds/follower-seed.tar && evoke configure follower"
}

#
## Failover & Promotion
#
function _perform_promotion() {
  # Stop current master
  if [[ $DRY_RUN = false ]]; then
    docker-compose stop conjur-master-1.mycompany.local
  fi

  # Promote Standby to Master
  _run conjur-master-2.mycompany.local \
    "evoke role promote"

  # Repoint Standby to updated Master
  _run conjur-master-3.mycompany.local \
    "evoke replication rebase conjur-master-2.mycompany.local"
}

function _single_master() {
  _start_master
  _configure_master
  echo "DAP instance available at: 'https://localhost'"
}

function _single_master_follower() {
  _start_master_and_follower
  _configure_master
  sleep 3 # to insure LB has time to detect availability
  _setup_follower
  _start_l7_load_balancer # because the LB needs the CA certificate from DAP follower via volume mount, we wait to set it up
  echo "Master available at: 'https://localhost'"
  echo "Follower available at: 'http://localhost'"
}

function _basic_cluster() {
  _start_cluster
  _configure_master
 	_setup_standby 2
  _setup_standby 3
  _start_standby_synchronization
  _setup_follower
  _start_l7_load_balancer
  echo "Master Cluster available at: 'https://localhost'"
  echo "Follower available at: 'http://localhost'"
}

function _stop() {
  echo "stopping...."
  docker-compose down -v

  rm -rf cli_cache
  rm -rf system/backup
  rm -rf system/logs
  rm files/haproxy/master/haproxy.cfg || true
  echo "stopped"
}

function _cli() {
  local _namespace=$1
  local _policy=$2

  echo "Loading Policy '$_policy':"
  cat $_policy
  echo ''
  echo "with command: 'conjur policy load $_namespace $_policy'"
  echo ''
  echo ''

  if [[ $DRY_RUN = false ]]; then
    bin/cli conjur policy load $_namespace $_policy
  fi
}

function _enable_autofailover() {
    _cli root "policy/base.yml"
    _cli conjur/cluster policy/cluster.yml

    _run conjur-master-1.mycompany.local "evoke cluster enroll --cluster-machine-name conjur-master-1.mycompany.local production"
    _run conjur-master-2.mycompany.local "evoke cluster enroll --cluster-machine-name conjur-master-2.mycompany.local --master-name conjur-master-1.mycompany.local production"
    _run conjur-master-3.mycompany.local "evoke cluster enroll --cluster-machine-name conjur-master-3.mycompany.local --master-name conjur-master-1.mycompany.local production"
}

function _create_backup() {
  _run conjur-master-1.mycompany.local "evoke backup"
}

TAG=5.0-stable
DRY_RUN=false
CMD=""

if [[ "$1" = "cluster" ]]; then
  shift
  CMD="_basic_cluster"

  while true ; do
    case "$1" in
      --create-backup ) CMD='_create_backup' ; shift ;;
      --default-cluster ) CMD='_basic_cluster' ; shift ;;
      --dry-run ) DRY_RUN=true ; shift ;;
      --enable-auto-failover ) CMD='_enable_autofailover' ; shift ;;
      --promote-standby ) CMD='_perform_promotion' ; shift ;;
      --stop ) _stop ; exit ;;
      -t | --tag ) shift ; TAG=$1 ; shift ;;
      -h | --help ) _print_cluster_help ; shift ;;
       * ) if [ -z "$1" ]; then break; else echo "$1 is not a valid option"; exit 1; fi;;
    esac
  done
elif [[ "$1" = "single" ]]; then
  shift
  CMD="_single_master"

  while true ; do
    case "$1" in
      --default ) CMD='_single_master' ; shift ;;
      --create-backup ) CMD='_create_backup' ; shift ;;
      --with-follower ) CMD='_single_master_follower' ; shift ;;
      --restore-from-backup ) CMD='' ;;
      --dry-run ) DRY_RUN=true ; shift ;;
      --stop ) _stop ; exit ;;
      -t | --tag ) shift ; TAG=$1 ; shift ;;
      -h | --help ) _print_single_help ; shift ;;
       * ) if [ -z "$1" ]; then break; else echo "$1 is not a valid option"; exit 1; fi;;
    esac
  done

else
  while true ; do
    case "$1" in
      -h | --help ) _print_help ; shift ;;
      --stop ) _stop ; exit ;;
       * ) if [ -z "$1" ]; then break; else echo "$1 is not a valid option"; exit 1; fi;;
    esac
  done
fi

export VERSION=$TAG

eval $CMD
