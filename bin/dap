#!/bin/bash -e
_admin_password="MySecretP@ss1"

function _print_help() {
  cat << EOF

A tool that provides a variety of DAP lifecycle workflows.

Synopsis: bin/dap <command> [command options]

Global Options:

    --h, --help                 Shows this help message
    --stop                      Stops all containers and cleans up cached files

Commands: bin/dap <command>


    cluster                     Setup and workflows for a DAP cluster
    single                      Setup and workflows for a single DAP instance

EOF
  exit
}

function _print_cluster_help() {
  cat << EOF

Provisions a DAP cluster locally using Docker, and run through some common workflows.

Usage: bin/dap cluster [options]

    --create-backup             Generates a backup of the Master. The backup can be found in the system/backup folder
    --dry-run                   Displays the commands that will be run, without actually running them
    --disable-auto-failover     Removes nodes into and auto-failover cluster
    --enable-auto-failover      Enrolls nodes into and auto-failover cluster
    -h, --help                  Shows this help message
    --promote-standby           Stops the Master and promotes the first Standby as the new Master
    --stop                      Stops all containers and cleans up cached files
    -t, --tag <appliance-tag>   Starts a cluster with a particular appliance (defaults to 5.0-stable)

EOF
  exit
}

function _print_single_help() {
  cat << EOF

Provisions a single DAP instance locally using Docker.

Usage: bin/dap single [options]

    --add-follower-proxy          Adds the follower as a trusted proxy (to enable client IP to be visable in audit logs)
    --create-backup               Generates a backup of the Master. The backup can be found in the system/backup folder
    --default                     Starts a single master behind a L4 load balancer (flag not required)
    --dry-run                     Displays the commands that will be run, without actually running them
    --fix-11.6-upgrade            Resolves the migration issue present when upgrading to 11.6.
    --from-backup                 Restores master from a previously created backup
    -h, --help                    Shows this help message
    --skip-pull                   Uses the latest local images instead of pulling the latest images
    --stop                        Stops all containers and cleans up cached files
    -t, --tag <appliance-tag>     Starts a cluster with a particular appliance (defaults to 5.0-stable)
    --upgrade-to <appliance-tag>  Upgrades master to the provided version using backup and restore
    --with-follower               Starts a DAP follower with a Layer 7 load balance

EOF
  exit
}

function _set_master_multi_node_proxy_config() {
  cp files/haproxy/master/multi-node/haproxy.cfg files/haproxy/master/haproxy.cfg
}

function _set_master_single_node_proxy_config() {
  cp files/haproxy/master/single/haproxy.cfg files/haproxy/master/haproxy.cfg
}

function _run() {
  local _all_args=("$@")
  local _node_name=$1
  local _args=("${_all_args[@]:1}")

  echo "Running Command (on $_node_name): docker exec cyberark-dap $_args"

  if [[ $DRY_RUN = false ]]; then
    docker-compose exec $_node_name bash -c "
      $_args
    "
  fi
}

function _start_cluster() {
  if [[ $DRY_RUN = false ]]; then

    if [[ "$PULL_IMAGES" = "true" ]]; then
      docker-compose pull
    fi

    _set_master_multi_node_proxy_config
    docker-compose up -d --no-deps conjur-master.mycompany.local \
                                    conjur-master-1.mycompany.local \
                                    conjur-master-2.mycompany.local \
                                    conjur-master-3.mycompany.local \
                                    conjur-follower-1.mycompany.local
  fi
}

function _start_master() {
  if [[ $DRY_RUN = false ]]; then

    if [[ "$PULL_IMAGES" = "true" ]]; then
      docker-compose pull
    fi

    _set_master_single_node_proxy_config
    docker-compose up -d --no-deps conjur-master.mycompany.local \
                                    conjur-master-1.mycompany.local
  fi
}

function _start_l7_load_balancer() {
  if [[ $DRY_RUN = false ]]; then
    docker-compose up -d --no-deps conjur-follower.mycompany.local
  fi
}

function _start_master_and_follower() {
  if [[ $DRY_RUN = false ]]; then

    if [[ "$PULL_IMAGES" = "true" ]]; then
      docker-compose pull
    fi

    _set_master_single_node_proxy_config
    docker-compose up -d --no-deps conjur-master.mycompany.local \
                                    conjur-master-1.mycompany.local \
                                    conjur-follower-1.mycompany.local
  fi
}

function _configure_master() {
  _cmd="evoke configure master"
  _cmd="$_cmd --accept-eula"
  _cmd="$_cmd --hostname conjur-master.mycompany.local"
  _cmd="$_cmd --master-altnames conjur-master-1.mycompany.local,conjur-master-2.mycompany.local,conjur-master-3.mycompany.local"
  _cmd="$_cmd --admin-password $_admin_password"
  _cmd="$_cmd demo"

  _run conjur-master-1.mycompany.local \
    "$_cmd"
}

function _setup_standby() {
  local _standby_number=$1

  docker-compose rm --stop conjur-master-$_standby_number.mycompany.local
  docker-compose up --no-deps --detach conjur-master-$_standby_number.mycompany.local

  # Generate a Seed File
  _run conjur-master-1.mycompany.local \
    "evoke seed standby conjur-master-$_standby_number.mycompany.local conjur-master-1.mycompany.local > /opt/cyberark/dap/seeds/standby-seed-$_standby_number.tar"

  # Unpack and Configure
  _run conjur-master-$_standby_number.mycompany.local \
    "evoke unpack seed /opt/cyberark/dap/seeds/standby-seed-$_standby_number.tar && evoke configure standby"
}

function _start_standby_synchronization() {
  _run conjur-master-1.mycompany.local \
    "evoke replication sync start"
}

function _setup_follower() {

  docker-compose rm --stop conjur-follower-1.mycompany.local
  docker-compose up --no-deps --detach conjur-follower-1.mycompany.local

  # Generate Seed file
  _run conjur-master-1.mycompany.local \
    "evoke seed follower conjur-follower.mycompany.local > /opt/cyberark/dap/seeds/follower-seed.tar"

  # Unpack and Configure
  _run conjur-follower-1.mycompany.local \
    "evoke unpack seed /opt/cyberark/dap/seeds/follower-seed.tar && evoke configure follower"
}

#
## Failover & Promotion
#
function _perform_promotion() {
  # Stop current master
  if [[ $DRY_RUN = false ]]; then
    docker-compose stop conjur-master-1.mycompany.local
  fi

  # Promote Standby to Master
  _run conjur-master-2.mycompany.local \
    "evoke role promote"

  # Repoint Standby to updated Master
  _run conjur-master-3.mycompany.local \
    "evoke replication rebase conjur-master-2.mycompany.local"
}

function _single_master() {
  _start_master
  _configure_master
  echo "DAP instance available at: 'https://localhost'"
}

function _single_master_follower() {
  _start_master_and_follower
  _configure_master
  sleep 10 # to insure LB has time to detect availability
  _setup_follower
  _start_l7_load_balancer # because the LB needs the CA certificate from DAP follower via volume mount, we wait to set it up
  echo "Master available at: 'https://localhost'"
  echo "Follower available at: 'http://localhost'"
}

function _reload_container {
  name="$1"
  docker-compose rm --stop --force $name
  docker-compose up --no-deps --detach $name

}

function _setup_standbys {
  # _setup_standby 2
  # _setup_standby 3
  # _start_standby_synchronization

  # Reload load balancer to serve cluster
  _set_master_multi_node_proxy_config
  _reload_container 'conjur-master.mycompany.local'
}

function _basic_cluster() {
  _start_cluster
  _configure_master
  _setup_standbys
 	# _setup_standby 2
  # _setup_standby 3
  # _start_standby_synchronization
  _setup_follower
  _start_l7_load_balancer
  echo "Master Cluster available at: 'https://localhost'"
  echo "Follower available at: 'http://localhost'"
}

function _stop() {
  echo "stopping...."
  docker-compose down -v

  rm -rf cli_cache
  rm -rf system/backup/
  rm -rf system/logs/
  rm files/haproxy/master/haproxy.cfg || true
  echo "stopped"
}

function _cli() {
  local _namespace=$1
  local _policy=$2

  echo "Loading Policy '$_policy':"
  cat $_policy
  echo ''
  echo "with command: 'conjur policy load $_namespace $_policy'"
  echo ''
  echo ''

  if [[ $DRY_RUN = false ]]; then
    bin/cli conjur policy load $_namespace $_policy
  fi
}

function _disable_autofailover {
  _run conjur-master-3.mycompany.local "evoke cluster member remove conjur-master-3.mycompany.local"
  _run conjur-master-2.mycompany.local "evoke cluster member remove conjur-master-2.mycompany.local"
}

function _enable_autofailover {
    _cli root "policy/base.yml"
    _cli conjur/cluster policy/cluster.yml

    _run conjur-master-1.mycompany.local "evoke cluster enroll --cluster-machine-name conjur-master-1.mycompany.local production"
    _run conjur-master-2.mycompany.local "evoke cluster enroll --cluster-machine-name conjur-master-2.mycompany.local --master-name conjur-master-1.mycompany.local production"
    _run conjur-master-3.mycompany.local "evoke cluster enroll --cluster-machine-name conjur-master-3.mycompany.local --master-name conjur-master-1.mycompany.local production"
}

function _re_enable_autofailover {
  _run conjur-master-2.mycompany.local "evoke cluster enroll --reenroll --cluster-machine-name conjur-master-2.mycompany.local --master-name conjur-master-1.mycompany.local production"
  _run conjur-master-3.mycompany.local "evoke cluster enroll --reenroll --cluster-machine-name conjur-master-3.mycompany.local --master-name conjur-master-1.mycompany.local production"
}

function _stop_replication() {
  if [[ $(docker ps --quiet --filter "name=conjur-master-2.mycompany.local") ]]; then
    _run conjur-master-2.mycompany.local "evoke replication stop"
  fi
  if [[ $(docker ps --quiet --filter "name=conjur-master-3.mycompany.local") ]]; then
    _run conjur-master-3.mycompany.local "evoke replication stop"
  fi
}

function _stop_and_rename() {
  local container_name="$1"
  local rename_to="$2"
  docker-compose stop $container_name
  image_id=$(docker ps --all --quiet --filter "name=$container_name")
  docker rename $image_id $rename_to
}

function _upgrade_via_backup_restore() {
  upgrade_to="$1"
  _upgrade_master_via_backup_restore $upgrade_to

  # redeploy standbys with the new container image and a new seed file from the master
  # Enable sync replication
  # If using Auto failover, enroll the master and standby nodes the cluster
  # redeploy followers with the new container image
  # remove old containers}

}

function _stop_and_remove_master {
  docker-compose rm --stop --force conjur-master-1.mycompany.local
}

function _restore_from_backup {
  _stop_and_remove_master
  _start_master

  # Unpack the backup with docker exec <container> evoke unpack backup -k /opt/conjur/backup/key /opt/conjur/backup/<yourbackupfile>
  _run conjur-master-1.mycompany.local "evoke unpack backup --key /opt/conjur/backup/key /opt/conjur/backup/*.tar.xz.gpg"

  # Configure the new master with docker exec <container> evoke restore master
  _run conjur-master-1.mycompany.local "evoke restore --accept-eula"
}

function _upgrade_master_via_backup_restore {
  upgrade_to="$1"
  # Run evoke replication stop on existing standbys and followers
  _stop_replication

  # Generate a backup on the existing master using evoke backup
  _create_backup

  # Stop the existing master container with docker stop <container> and rename
  _stop_and_rename 'conjur-master-1.mycompany.local' 'conjur-master-1.mycompany.local_backup'

  # Start a container using the new version image (this will become the new master)
  export VERSION=$upgrade_to
  _restore_from_backup

  # Confirm master is healthy
}

function _create_backup() {
  rm -rf system/backup/*
  _run conjur-master-1.mycompany.local \
    "evoke backup"
}

function _add_follower_proxy() {
  _run conjur-follower-1.mycompany.local \
    "evoke proxy add 12.16.23.15"
}

function _fix_11_6_0 {
  _run conjur-master-1.mycompany.local \
    "sv stop conjur"
  _run conjur-master-1.mycompany.local \
    "chpst -u postgres psql -c \"ALTER TABLE slosilo_keystore DROP COLUMN fingerprint\" -d conjur"
  _run conjur-master-1.mycompany.local \
    "chpst -u conjur conjur-possum rake slosilo:migrate"
  _run conjur-master-1.mycompany.local \
    "sv start conjur"
}

TAG=5.0-stable
DRY_RUN=false
PULL_IMAGES=true
CMD=""
to_version=""

if [[ "$1" = "cluster" ]]; then
  shift
  CMD="_basic_cluster"

  while true ; do
    case "$1" in
      --create-backup ) CMD='_create_backup' ; shift ;;
      --default ) CMD='_basic_cluster' ; shift ;;
      --dry-run ) DRY_RUN=true ; shift ;;
      --disable-auto-failover ) CMD='_disable_autofailover' ; shift ;;
      --enable-auto-failover ) CMD='_enable_autofailover' ; shift ;;
      --promote-standby ) CMD='_perform_promotion' ; shift ;;
      --redeploy-standbys ) CMD='_setup_standbys' ; shift ;;
      --stop ) _stop ; exit ;;
      --skip-pull ) PULL_IMAGES=false ; shift ;;
      -t | --tag ) shift ; TAG=$1 ; shift ;;
      -h | --help ) _print_cluster_help ; shift ;;
       * ) if [ -z "$1" ]; then break; else echo "$1 is not a valid option"; exit 1; fi;;
    esac
  done
elif [[ "$1" = "single" ]]; then
  shift
  CMD="_single_master"

  while true ; do
    case "$1" in
      --add-follower-proxy ) CMD='_add_follower_proxy' ; shift ;;
      --create-backup ) CMD='_create_backup' ; shift ;;
      --default ) CMD='_single_master' ; shift ;;
      --dry-run ) DRY_RUN=true ; shift ;;
      --fix-11.6-upgrade ) CMD="_fix_11_6_0"; shift ;;
      --from-backup ) CMD="_restore_from_backup" ; shift ;;
      -h | --help ) _print_single_help ; shift ;;
      --skip-pull ) PULL_IMAGES=false ; shift ;;
      --stop ) _stop ; exit ;;
      -t | --tag ) shift ; TAG=$1 ; shift ;;
      --upgrade-to ) shift ; CMD="_upgrade_via_backup_restore $1" ; shift ;;
      --with-follower ) CMD='_single_master_follower' ; shift ;;
       * ) if [ -z "$1" ]; then break; else echo "$1 is not a valid option"; exit 1; fi;;
    esac
  done

else
  while true ; do
    case "$1" in
      --version ) shift ; TAG=$1 ; shift ;;
      --dry-run ) DRY_RUN=true ; shift ;;
      -h | --help ) _print_help ; shift ;;
      --provision-master ) CMD='_single_master' ; shift ;;
      # --import-certificates ) CMD='' ; shift ;;
      --provision-standbys ) CMD='_setup_standbys' ; shift ;;
      --enable-auto-failover ) CMD='_enable_autofailover' ; shift ;;
      --disable-auto-failover ) CMD='_disable_autofailover' ; shift ;;
      --re-enable-auto-failover ) CMD='_re_enable_autofailover' ; shift ;;
      # --provision-follower ) _setup_follower ; _start_l7_load_balancer ; shift ;;
      --upgrade-master ) CMD='_upgrade_via_backup_restore' ; shift ;;
      # --trigger-failover ) ; shift ;;
      --create-backup ) CMD='_create_backup' ; shift ;;
      --restore-from-backup ) CMD='_restore_from_backup' ; shift ;;
      --stop ) _stop ; shift ;;
       * ) if [ -z "$1" ]; then break; else echo "$1 is not a valid option"; exit 1; fi;;
    esac
  done
fi

export VERSION=$TAG

eval $CMD
