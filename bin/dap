#!/bin/bash -e

# Always work from repo root directory
cd "$(dirname ${0})/..";

source ./bin/utils.sh

# Make sure .env envvars are available
dotenv

CONJUR_MASTER_PORT=${CONJUR_MASTER_PORT:-443}
_admin_password="MySecretP@ss1"
TAG=5.0-stable
TAG=5.0-stable
DRY_RUN=false
PULL_IMAGES=true
CMD=""
to_version=""

function main {
  while true ; do
    case "$1" in
      --provision-master ) CMD='_single_master' ; shift ;;
      --promote-standby ) CMD='_perform_promotion' ; shift ;;
      --import-custom-certificates ) CMD='_import_certificates' ; shift ;;
      --provision-standbys ) CMD='_setup_standbys' ; shift ;;
      --enable-auto-failover ) CMD='_enable_autofailover' ; shift ;;
      --provision-follower ) CMD='_setup_follower' ; shift ;;
      --upgrade-master ) shift ; CMD="_upgrade_via_backup_restore $1" ; shift ;;
      --version ) shift ; TAG=$1 ; shift ;;
      --dry-run ) DRY_RUN=true ; shift ;;
      -h | --help ) _print_help ; shift ;;
      --trigger-failover ) CMD='_trigger_master_failover_failover' ; shift ;;
      --create-backup ) CMD='_create_backup' ; shift ;;
      --restore-from-backup ) CMD='_restore_from_backup' ; shift ;;
      --trust-follower-proxy ) CMD='_add_follower_proxy' ; shift ;;
      --stop ) _stop ; shift ;;
       * ) if [ -z "$1" ]; then break; else echo "$1 is not a valid option"; exit 1; fi;;
    esac
  done

  export VERSION=$TAG

  eval $CMD
}

function _print_help {
  cat << EOF

A tool that provides a variety of DAP lifecycle workflows.

Synopsis: bin/dap [command options]

Usage: bin/dap [options]:

    --create-backup               Creates a backup|Requires configured master
    --dry-run                     Print configuration commands with executing
    --enable-auto-failover        Configures Master cluster with auto-failover (Requires configured master and standbys)
    --h, --help                   Shows this help message
    --import-custom-certificates  Imports pre-generated 3rd-party certificates (Requires configured master)
    --promote-standby             Stops the current master and promotes a standby (Requires configured standbys and no auto-failover)
    --provision-follower          Configures follower behind a Layer 7 load balancer (Requires configured master)
    --provision-master            Configures a DAP Master with account `default` and password `MySecretP@ss1` behind a Layer 4 load balancer
    --provision-standbys          Deploys and configures two standbys (Requires configured master)
    --restore-from-backup         Restores a master from backup|Requires a previously created backup
    --stop                        Stops all containers and cleans up cached files
    --trigger-failover            Stops current master (Requires an auto-failover cluster)
    --trust-follower-proxy        Adds Follower load balancer as a trusted proxy (Requires a configured follower)
    --upgrade-master <version>    Restores master from backup (Requires configured master)
    --version <version>           Version of DAP to use (defaults to latest build)


EOF
  exit
}

function _set_master_multi_node_proxy_config {
  cp files/haproxy/master/multi-node/haproxy.cfg files/haproxy/master/haproxy.cfg
}

function _set_master_single_node_proxy_config {
  cp files/haproxy/master/single/haproxy.cfg files/haproxy/master/haproxy.cfg
}

function _run {
  local _all_args=("$@")
  local _node_name=$1
  local _args=("${_all_args[@]:1}")

  echo "Running Command (on $_node_name): docker exec cyberark-dap $_args"

  if [[ $DRY_RUN = false ]]; then
    docker-compose exec -T $_node_name bash -c "
      $_args
    "
  fi
}

function _start_master {
  if [[ $DRY_RUN = false ]]; then

    if [[ "$PULL_IMAGES" = "true" ]]; then
      docker-compose pull
    fi

    _set_master_single_node_proxy_config
    docker-compose up -d --no-deps conjur-master.mycompany.local \
                                    conjur-master-1.mycompany.local
  fi
}

function _start_l7_load_balancer {
  if [[ $DRY_RUN = false ]]; then
    docker-compose up -d --no-deps conjur-follower.mycompany.local
  fi
}

function _configure_master {
  _cmd="evoke configure master"
  _cmd="$_cmd --accept-eula"
  _cmd="$_cmd --hostname conjur-master.mycompany.local"
  _cmd="$_cmd --master-altnames conjur-master-1.mycompany.local,conjur-master-2.mycompany.local,conjur-master-3.mycompany.local"
  _cmd="$_cmd --admin-password $_admin_password"
  _cmd="$_cmd demo"

  _run conjur-master-1.mycompany.local \
    "$_cmd"
}

function _setup_standby {
  local _standby_number=$1

  docker-compose rm --stop --force conjur-master-$_standby_number.mycompany.local
  docker-compose up --no-deps --detach conjur-master-$_standby_number.mycompany.local

  # Generate a Seed File
  _run conjur-master-1.mycompany.local \
    "evoke seed standby conjur-master-$_standby_number.mycompany.local conjur-master-1.mycompany.local > /opt/cyberark/dap/seeds/standby-seed-$_standby_number.tar"

  # Unpack and Configure
  _run conjur-master-$_standby_number.mycompany.local \
    "evoke unpack seed /opt/cyberark/dap/seeds/standby-seed-$_standby_number.tar && evoke configure standby"
}

function _start_standby_synchronization {
  _run conjur-master-1.mycompany.local \
    "evoke replication sync start"
}

function _setup_follower {

  docker-compose rm --stop --force conjur-follower-1.mycompany.local
  docker-compose up --no-deps --detach conjur-follower-1.mycompany.local

  # Generate Seed file
  _run conjur-master-1.mycompany.local \
    "evoke seed follower conjur-follower.mycompany.local > /opt/cyberark/dap/seeds/follower-seed.tar"

  # Unpack and Configure
  _run conjur-follower-1.mycompany.local \
    "evoke unpack seed /opt/cyberark/dap/seeds/follower-seed.tar && evoke configure follower"

  _start_l7_load_balancer
}

#
## Failover & Promotion
#
function _perform_promotion {
  # Stop current master
  if [[ $DRY_RUN = false ]]; then
    docker-compose stop conjur-master-1.mycompany.local
  fi

  # Promote Standby to Master
  _run conjur-master-2.mycompany.local \
    "evoke role promote"

  # Repoint Standby to updated Master
  _run conjur-master-3.mycompany.local \
    "evoke replication rebase conjur-master-2.mycompany.local"
}

function _single_master {
  _start_master
  _configure_master
  echo "DAP instance available at: 'https://localhost:${CONJUR_MASTER_PORT}'"
}

function _reload_container {
  name="$1"
  docker-compose rm --stop --force $name
  docker-compose up --no-deps --detach $name

}

function _setup_standbys {
  _setup_standby 2
  _setup_standby 3
  _start_standby_synchronization

  # Reload load balancer to serve cluster
  _set_master_multi_node_proxy_config
  _reload_container 'conjur-master.mycompany.local'
}

function _stop {
  echo "stopping...."
  docker-compose down -v

  rm -rf cli_cache
  rm -rf system/backup/
  rm -rf system/logs/
  rm files/haproxy/master/haproxy.cfg || true
  echo "stopped"
}

function _cli {
  local _namespace=$1
  local _policy=$2

  echo "Loading Policy '$_policy':"
  cat $_policy
  echo ''
  echo "with command: 'conjur policy load $_namespace $_policy'"
  echo ''
  echo ''

  if [[ $DRY_RUN = false ]]; then
    bin/cli conjur policy load $_namespace $_policy
  fi
}

function _disable_autofailover {
  _run conjur-master-3.mycompany.local "evoke cluster member remove conjur-master-3.mycompany.local"
  _run conjur-master-2.mycompany.local "evoke cluster member remove conjur-master-2.mycompany.local"
}

function _enable_autofailover {

  autofailover=$(curl -k https://localhost:${CONJUR_MASTER_PORT}/info | jq .configuration.conjur.cluster_name)
  if [[ $autofailover = 'production' ]]; then
    _run conjur-master-2.mycompany.local "evoke cluster enroll --reenroll --cluster-machine-name conjur-master-2.mycompany.local --master-name conjur-master-1.mycompany.local production"
    _run conjur-master-3.mycompany.local "evoke cluster enroll --reenroll --cluster-machine-name conjur-master-3.mycompany.local --master-name conjur-master-1.mycompany.local production"
  else
    _cli root "policy/base.yml"
    _cli conjur/cluster policy/cluster.yml

    _run conjur-master-1.mycompany.local "evoke cluster enroll --cluster-machine-name conjur-master-1.mycompany.local production"
    _run conjur-master-2.mycompany.local "evoke cluster enroll --cluster-machine-name conjur-master-2.mycompany.local --master-name conjur-master-1.mycompany.local production"
    _run conjur-master-3.mycompany.local "evoke cluster enroll --cluster-machine-name conjur-master-3.mycompany.local --master-name conjur-master-1.mycompany.local production"
  fi
}

function _stop_replication {
  if [[ $(docker ps --quiet --filter "name=conjur-master-2.mycompany.local") ]]; then
    _run conjur-master-2.mycompany.local "evoke replication stop"
  fi
  if [[ $(docker ps --quiet --filter "name=conjur-master-3.mycompany.local") ]]; then
    _run conjur-master-3.mycompany.local "evoke replication stop"
  fi
}

function _stop_and_rename {
  local container_name="$1"
  local rename_to="$2"
  docker-compose stop $container_name
  image_id=$(docker ps --all --quiet --filter "name=$container_name")
  docker rename $image_id $rename_to
}

function _upgrade_via_backup_restore {
  upgrade_to="$1"

  autofailover=$(curl -k https://localhost:${CONJUR_MASTER_PORT}/info | jq .configuration.conjur.cluster_name)

  # jq returns a quoted string, so we need to check for: "production" instead of: production (without double quotes)
  if [ "$autofailover" = '"production"' ]; then
    _disable_autofailover
  fi
  _upgrade_master_via_backup_restore $upgrade_to
}

function _stop_and_remove_master {
  docker-compose rm --stop --force conjur-master-1.mycompany.local
}

function _restore_from_backup {
  _stop_and_remove_master
  _start_master

  # Unpack the backup with docker exec <container> evoke unpack backup -k /opt/conjur/backup/key /opt/conjur/backup/<yourbackupfile>
  backup=$(ls -1t system/backup | grep gpg | head -1)
  _run conjur-master-1.mycompany.local "evoke unpack backup --key /opt/conjur/backup/key /opt/conjur/backup/$backup"

  # Configure the new master with docker exec <container> evoke restore master
  _run conjur-master-1.mycompany.local "evoke restore --accept-eula"
}

function _upgrade_master_via_backup_restore {
  upgrade_to="$1"
  # Run evoke replication stop on existing standbys and followers
  _stop_replication

  # Generate a backup on the existing master using evoke backup
  _create_backup

  # Stop the existing master container with docker stop <container> and rename
  _stop_and_rename 'conjur-master-1.mycompany.local' 'conjur-master-1.mycompany.local_backup'

  # Start a container using the new version image (this will become the new master)
  export VERSION=$upgrade_to
  _restore_from_backup

  # Confirm master is healthy
}

function _create_backup {
  _run conjur-master-1.mycompany.local \
    "evoke backup"
}

function _add_follower_proxy {
  _run conjur-follower-1.mycompany.local \
    "evoke proxy add 12.16.23.15"
}

function _trigger_master_failover_failover {
  _run conjur-master-1.mycompany.local \
    "sv stop conjur"
  echo 'Auto-failover takes about a minute to complete.'
}

# function _fix_11_6_0 {
#   _run conjur-master-1.mycompany.local \
#     "sv stop conjur"
#   _run conjur-master-1.mycompany.local \
#     "chpst -u postgres psql -c \"ALTER TABLE slosilo_keystore DROP COLUMN fingerprint\" -d conjur"
#   _run conjur-master-1.mycompany.local \
#     "chpst -u conjur conjur-possum rake slosilo:migrate"
#   _run conjur-master-1.mycompany.local \
#     "sv start conjur"
# }

function _import_certificates {
  local cert_path='/opt/cyberark/dap/configuration/certificates'
  _run conjur-master-1.mycompany.local \
    "evoke ca import --root $cert_path/ca-chain.cert.pem"
  _run conjur-master-1.mycompany.local \
    "evoke ca import --key $cert_path/conjur-master.mycompany.local.key.pem --set $cert_path/conjur-master.mycompany.local.cert.pem"
  _run conjur-master-1.mycompany.local \
    "evoke ca import --key $cert_path/conjur-follower.mycompany.local.key.pem $cert_path/conjur-follower.mycompany.local.cert.pem"
}

main $@
